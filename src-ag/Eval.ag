imports {
import qualified Data.Map.Strict as Map
import Ast
}

include "Ast.ag"

attr Root
    syn result :: Expr

attr Root Expr
    inh db :: {Map.Map String Expr}

attr Expr Lit
    syn result :: {Expr}

sem Lit
    | LInt lhs.result = genChurchNumber @value
    | LBool lhs.result = if @value
                            then (Lam "x" (Lam "y" (Var "x")))
                            else (Lam "x" (Lam "y" (Var "y")))

sem Expr
    | Lit lhs.result = @lit.result
    | Var lhs.result = case Map.lookup @name @lhs.db of
                          Nothing  -> Var @name
                          Just val -> val
    | Lam lhs.result = Lam @name @expr.result
    | App lhs.result = case @expr1.result of
                            (Lam nm bd) -> let env' = Map.insert nm @expr2.result @lhs.db
                                           in sem_Root (Root bd) env'
                            _           -> App @expr1.result @expr2.result

{
genChurchNumber :: Int -> Expr
genChurchNumber n = Lam "s" (Lam "z" (buildChurchNumber n))
    where buildChurchNumber :: Int -> Expr
          buildChurchNumber 0 = Var "z"
          buildChurchNumber m = App (Var "s") (buildChurchNumber (m - 1))
}